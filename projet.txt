# target/maven-archiver/pom.properties
artifactId=plant-shop-jpa-spring-boot-hibernate-security
groupId=com.planteshop
version=1.0.0

# src/main/java/com/planteshop/repository/OrderRepository.java
package com.planteshop.repository;

import com.planteshop.model.entity.CustomerOrder;
import com.planteshop.model.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface OrderRepository extends JpaRepository<CustomerOrder, Long> {
    List<CustomerOrder> findByUser(User user);
}

# src/main/java/com/planteshop/repository/UserRepository.java
package com.planteshop.repository;

import com.planteshop.model.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByEmail(String email);
}

# src/main/java/com/planteshop/repository/PlantRepository.java
package com.planteshop.repository;

import com.planteshop.model.entity.Plant;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PlantRepository extends JpaRepository<Plant, Long> {
}

# src/main/java/com/planteshop/model/enums/RoleType.java
package com.planteshop.model.enums;

public enum RoleType {
    VISITOR,
    USER,
    ADMIN
}

# src/main/java/com/planteshop/model/entity/CustomerOrder.java
package com.planteshop.model.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "orders")
public class CustomerOrder {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Double totalPrice;
    private String status;
    private LocalDateTime createdAt;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
    private List<OrderItem> items;

    // Getters, setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public Double getTotalPrice() { return totalPrice; }
    public void setTotalPrice(Double totalPrice) { this.totalPrice = totalPrice; }
    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }
    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
    public User getUser() { return user; }
    public void setUser(User user) { this.user = user; }
    public List<OrderItem> getItems() { return items; }
    public void setItems(List<OrderItem> items) { this.items = items; }
}

# src/main/java/com/planteshop/model/entity/OrderItem.java
package com.planteshop.model.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "order_items")
public class OrderItem {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Integer quantity;

    @ManyToOne
    @JoinColumn(name = "plant_id")
    private Plant plant;

    @ManyToOne
    @JoinColumn(name = "order_id")
    private CustomerOrder order;

    // Getters, setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { this.quantity = quantity; }
    public Plant getPlant() { return plant; }
    public void setPlant(Plant plant) { this.plant = plant; }
    public CustomerOrder getOrder() { return order; }
    public void setOrder(CustomerOrder order) { this.order = order; }
}

# src/main/java/com/planteshop/model/entity/User.java
package com.planteshop.model.entity;

import com.planteshop.model.enums.RoleType;
import jakarta.persistence.*;

import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

@Entity
@Table(name = "users")
public class User implements UserDetails {
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
    private String password;

    @Enumerated(EnumType.STRING)
    private RoleType role;

    @OneToMany(mappedBy = "user")
    private List<CustomerOrder> orders;

		@Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority("ROLE_" + role.name()));
    }
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    public RoleType getRole() { return role; }
    public void setRole(RoleType role) { this.role = role; }
    public List<CustomerOrder> getOrders() { return orders; }
    public void setOrders(List<CustomerOrder> orders) { this.orders = orders; }
    @Override public String getUsername() { return email; }
    @Override public boolean isAccountNonExpired() { return true; }
    @Override public boolean isAccountNonLocked() { return true; }
    @Override public boolean isCredentialsNonExpired() { return true; }
    @Override public boolean isEnabled() { return true; }
}

# src/main/java/com/planteshop/model/entity/Plant.java
package com.planteshop.model.entity;

import jakarta.persistence.*;

@Entity
public class Plant {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String description;
    private Double price;
    private String category;
    private Integer stock;

    // Getters/Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    public Double getPrice() { return price; }
    public void setPrice(Double price) { this.price = price; }
    public String getCategory() { return category; }
    public void setCategory(String category) { this.category = category; }
    public Integer getStock() { return stock; }
    public void setStock(Integer stock) { this.stock = stock; }
}

# src/main/java/com/planteshop/service/impl/UserDetailsServiceImpl.java
package com.planteshop.service.impl;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.planteshop.model.entity.User;
import com.planteshop.repository.UserRepository;

@Service
public class UserDetailsServiceImpl implements UserDetailsService {

    private final UserRepository userRepository;

    public UserDetailsServiceImpl(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    // @Override
    // public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		// 		System.err.println("‚öôÔ∏è M√©thode loadUserByUsername appel√©e");
    //     System.err.println("üîç Tentative de connexion avec : " + email);
    //     User user = userRepository.findByEmail(email)
    //         .orElseThrow(() -> {
    //             System.err.println("Email introuvable en base : " + email);
    //             return new UsernameNotFoundException("Utilisateur non trouv√©");
    //         });

		// 		System.err.println("DEBUG : Utilisateur trouv√© : " + user.getEmail());
		// 		System.err.println("DEBUG : Hash stock√© : " + user.getPassword());
		// 		return org.springframework.security.core.userdetails.User
		// 			.withUsername(user.getEmail())
		// 			.password(user.getPassword())
		// 			.roles(user.getRole().name())
		// 			.build();

    // }

		public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
			return userRepository.findByEmail(email)
						 .orElseThrow(() -> new UsernameNotFoundException("Utilisateur non trouv√©"));
	}
}

# src/main/java/com/planteshop/controller/api/ApiPlantController.java
package com.planteshop.controller.api;

import com.planteshop.model.entity.Plant;
import com.planteshop.repository.PlantRepository;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/api/plants")
public class ApiPlantController {
    private final PlantRepository plantRepository;

    public ApiPlantController(PlantRepository plantRepository) {
        this.plantRepository = plantRepository;
    }

    @GetMapping
    public List<Plant> getAllPlants() {
        return plantRepository.findAll();
    }

    @GetMapping("/{id}")
    public Plant getPlantById(@PathVariable Long id) {
        return plantRepository.findById(id).orElse(null);
    }

    @PostMapping
    public Plant addPlant(@RequestBody Plant plant) {
        return plantRepository.save(plant);
    }

    @PutMapping("/{id}")
    public Plant updatePlant(@PathVariable Long id, @RequestBody Plant plant) {
        plant.setId(id);
        return plantRepository.save(plant);
    }

    @DeleteMapping("/{id}")
    public void deletePlant(@PathVariable Long id) {
        plantRepository.deleteById(id);
    }
}

# src/main/java/com/planteshop/controller/web/ProfileController.java
package com.planteshop.controller.web;

import com.planteshop.model.entity.User;
import com.planteshop.util.StringUtils;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class ProfileController {

    @GetMapping("/my_profile")
    public String profile(@AuthenticationPrincipal User user, Model model) {
        model.addAttribute("user", user);
        model.addAttribute("displayName", StringUtils.toCapitalCase(user.getName()));
        return "profile";
    }
}

# src/main/java/com/planteshop/controller/web/LoginController.java
package com.planteshop.controller.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class LoginController {

    @GetMapping("/login")
    public String login() {
        return "login"; // Correspond √† src/main/resources/templates/login.html
    }
}

# src/main/java/com/planteshop/controller/web/CartController.java
package com.planteshop.controller.web;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class CartController {

    @GetMapping("/cart")
    public String cart() {
        return "cart";
    }
}

# src/main/java/com/planteshop/controller/web/WebPlantController.java
package com.planteshop.controller.web;

import com.planteshop.repository.PlantRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;

@Controller
public class WebPlantController {
    private final PlantRepository plantRepository;

    public WebPlantController(PlantRepository plantRepository) {
        this.plantRepository = plantRepository;
    }

    @GetMapping("/")
    public String home() {
        return "redirect:/plants";
    }

    @GetMapping("/plants")
    public String index(Model model) {
        model.addAttribute("plants", plantRepository.findAll());
        return "plants/index";
    }

    @GetMapping("/plants/{id}")
    public String show(@PathVariable Long id, Model model) {
        plantRepository.findById(id).ifPresent(plant -> model.addAttribute("plant", plant));
        return "plants/show";
    }
}

# src/main/java/com/planteshop/controller/web/RegistrationController.java
package com.planteshop.controller.web;

import com.planteshop.model.entity.User;
import com.planteshop.model.enums.RoleType;
import com.planteshop.repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;

@Controller
public class RegistrationController {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public RegistrationController(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new User());
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@ModelAttribute("user") User user, BindingResult result, Model model) {
        if (userRepository.findByEmail(user.getEmail()).isPresent()) {
            result.rejectValue("email", "error.user", "Cet email est d√©j√† utilis√©");
        }

        if (result.hasErrors()) {
            return "register";
        }

        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setRole(RoleType.USER);
        userRepository.save(user);

        return "redirect:/login?registered";
    }
}

# src/main/java/com/planteshop/controller/GlobalUserTypeAdvice.java
package com.planteshop.controller;

import com.planteshop.model.entity.User;
import com.planteshop.model.enums.RoleType;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ModelAttribute;

@ControllerAdvice
public class GlobalUserTypeAdvice {
	/**
	 * Expose l‚Äô√©num directement √† la vue.
	 * - VISITOR si pas connect√©
	 * - USER / ADMIN sinon
	 */
	// @ModelAttribute("userRole")
	// public String userRole(@AuthenticationPrincipal User user) {
	// 	try {
	// 		return user.getRole().name().toLowerCase();
	// 	} catch (Exception exception) {
	// 		System.err.println("DEBUG : GlobalUserTypeAdvice.serRole - Error : "+exception);
	// 		return "visitor";
	// 	}
	// }

	@ModelAttribute("userRole")
	public String userRole(@AuthenticationPrincipal User user) {
			return user.getRole().name().toLowerCase();
	}
}

# src/main/java/com/planteshop/config/SecurityConfig.java
package com.planteshop.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		http
				.csrf(csrf -> csrf.disable())
				.authorizeHttpRequests(auth -> auth
						.requestMatchers(
								"/",
								"/favicon.svg",
								"/favicon.ico",
								"/plants",
								"/plants/**",
								"/css/**",
								"/js/**",
								"/webjars/**",
								"/login",

								"/register",
								"/api/plants/**",
								"/cart/**")

						.permitAll()
						.requestMatchers("/admin/**").hasRole("ADMIN")
						.requestMatchers("/orders/**", "/my_profile/**").authenticated()
						.anyRequest().permitAll() // Modifi√© pour permettre l'acc√®s √† tout le reste
				)
				.formLogin(form -> form
						.loginPage("/login")
						.usernameParameter("email")
						.defaultSuccessUrl("/plants") // Page apr√®s login r√©ussi
						.permitAll())
				.logout(logout -> logout
						.logoutSuccessUrl("/") // Page apr√®s logout
						.permitAll());

		return http.build();
	}

	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
}

# src/main/java/com/planteshop/seed/DatabaseSeeder.java
package com.planteshop.seed;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import com.planteshop.model.entity.Plant;
import com.planteshop.model.entity.User;
import com.planteshop.model.enums.RoleType;
import com.planteshop.repository.PlantRepository;
import com.planteshop.repository.UserRepository;

import net.datafaker.Faker;

@Component
@Profile("seed")
public class DatabaseSeeder implements CommandLineRunner {

    private final PlantRepository plantRepository;
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final Faker faker = new Faker();

    private final List<Credential> credentials = new ArrayList<>();

    private static final List<String> PLANT_NAMES = Arrays.asList(
        "Rose", "Tulipe", "Lavande", "Orchid√©e", "Basilic",
        "Menthe", "Pivoine", "Tournesol", "Cactus", "Bambou"
    );
    private static final List<String> PLANT_CATEGORIES = Arrays.asList("int√©rieur", "ext√©rieur");

    private static final int NB_PLANTS = 30;
    private static final int NB_ADMINS = 3;
    private static final int NB_USERS = 15;

    public DatabaseSeeder(PlantRepository plantRepository,
                           UserRepository userRepository,
                           PasswordEncoder passwordEncoder) {
        this.plantRepository = plantRepository;
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @Override
    public void run(String... args) throws Exception {
        if (plantRepository.count() == 0 && userRepository.count() == 0) {
            List<User> users = createUsers();
            createPlants();
            generateUsersFile();
            System.out.println("Database seeded successfully!");
        }
    }

    private List<User> createUsers() {
        List<User> users = new ArrayList<>();

        for (int i = 0; i < NB_ADMINS; i++) {
            users.add(createUser(true));
        }

        for (int i = 0; i < NB_USERS; i++) {
            users.add(createUser(false));
        }

        return userRepository.saveAll(users);
    }

    private User createUser(boolean isAdmin) {
        String name = faker.name().fullName();
        String email = generateEmailFromName(name);
        String rawPassword = faker.color().name().replaceAll("\\s+", "").toLowerCase()
                             + faker.animal().name().replaceAll("\\s+", "").toLowerCase()
                             + faker.number().numberBetween(10, 99);

        User user = new User();
        user.setName(name);
        user.setEmail(email);
        user.setPassword(passwordEncoder.encode(rawPassword));
        user.setRole(isAdmin ? RoleType.ADMIN : RoleType.USER);

        credentials.add(new Credential(email, rawPassword, isAdmin));
				System.err.println("DEBUG : üìù Cr√©√© : " + email + " | " + rawPassword + " | role=" + (isAdmin ? "ADMIN" : "USER"));

        return user;
    }

    private String generateEmailFromName(String name) {
        String slug = name.trim().toLowerCase().replaceAll("[^a-z ]", "").replaceAll("\\s+", ".");
        return slug + "@planteshop.com";
    }

    private void createPlants() {
        List<Plant> plants = new ArrayList<>();

        for (int i = 0; i < NB_PLANTS; i++) {
            Plant plant = new Plant();
            plant.setName(PLANT_NAMES.get(i % PLANT_NAMES.size()) + " " + (i + 1));
            plant.setDescription("Magnifique " + PLANT_NAMES.get(i % PLANT_NAMES.size()).toLowerCase());
            plant.setPrice(5 + (i * 2.5));
            plant.setCategory(PLANT_CATEGORIES.get(i % PLANT_CATEGORIES.size()));
            plant.setStock(10 + i);
            plants.add(plant);
        }

        plantRepository.saveAll(plants);
    }

    private void generateUsersFile() throws IOException {
        try (FileWriter writer = new FileWriter("users.txt")) {
            writer.write("=== ADMINS ===\n");
            credentials.stream()
                .filter(Credential::isAdmin)
                .forEach(c -> writeCredential(writer, c));

            writer.write("\n=== USERS ===\n");
            credentials.stream()
                .filter(c -> !c.isAdmin())
                .forEach(c -> writeCredential(writer, c));
        }
    }

    private void writeCredential(FileWriter writer, Credential c) {
        try {
            writer.write(c.email + " " + c.password + "\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static class Credential {
        String email;
        String password;
        boolean admin;

        public Credential(String email, String password, boolean admin) {
            this.email = email;
            this.password = password;
            this.admin = admin;
        }

        public boolean isAdmin() {
            return admin;
        }
    }
}

# src/main/java/com/planteshop/util/StringUtils.java
package com.planteshop.util;

public class StringUtils {
    public static String toCapitalCase(String text) {
        if (text == null || text.isEmpty()) {
            return text;
        }

        String[] words = text.split("\\s+");
        StringBuilder result = new StringBuilder();

        for (String word : words) {
            if (!word.isEmpty()) {
                result.append(Character.toUpperCase(word.charAt(0)))
                      .append(word.substring(1).toLowerCase())
                      .append(" ");
            }
        }

        return result.toString().trim();
    }
}

# src/main/java/com/planteshop/PlantShopApplication.java
package com.planteshop;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class PlantShopApplication {
    public static void main(String[] args) {
        SpringApplication.run(PlantShopApplication.class, args);
    }
}

# pom.xml
<project>
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.5</version>
    </parent>

    <groupId>com.planteshop</groupId>
    <artifactId>plant-shop-jpa-spring-boot-hibernate-security</artifactId>
    <version>1.0.0</version>

    <dependencies>
        <!-- PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.3</version>
            <!-- <scope>runtime</scope> -->
        </dependency>

        <!-- Faker (pour la seed) -->
        <dependency>
            <groupId>net.datafaker</groupId>
            <artifactId>datafaker</artifactId>
            <version>2.0.2</version>
        </dependency>

        <!-- Web + Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!-- JPA + Hibernate -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Bootstrap -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>5.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator</artifactId>
            <version>0.46</version>
        </dependency>
        <!-- Rechargement automatique -->
        <!-- <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency> -->
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>


# Tree du dossier
.
‚îú‚îÄ‚îÄ db
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ plant-shop.db
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ pom.xml
‚îú‚îÄ‚îÄ projet.txt
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ script.sh
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ com
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ config
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ SecurityConfig.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ApiPlantController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ exception
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalUserTypeAdvice.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ web
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ CartController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ LoginController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ProfileController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ RegistrationController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ WebPlantController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ model
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dto
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ request
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ response
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ entity
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CustomerOrder.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderItem.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Plant.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ User.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ enums
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ RoleType.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ PlantShopApplication.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ repository
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderRepository.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ PlantRepository.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserRepository.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ seed
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ DatabaseSeeder.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ service
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ impl
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ UserDetailsServiceImpl.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ util
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ StringUtils.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ resources
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ application.yml
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ db
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ V1__init_schema.sql
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ static
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ style.css
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon.svg
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ app.js
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ templates
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ cart.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ fragments
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ base.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ login.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ orders
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ plants
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ show.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ profile.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ register.html
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ java
‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ com
‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬†                 ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬†                 ‚îî‚îÄ‚îÄ service
‚îú‚îÄ‚îÄ target
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ classes
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ application.yml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ com
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ config
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ SecurityConfig.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ApiPlantController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ exception
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalUserTypeAdvice$1.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalUserTypeAdvice.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ web
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ CartController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ LoginController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ProfileController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ RegistrationController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ WebPlantController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ model
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dto
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ request
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ response
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ entity
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CustomerOrder.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderItem.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Plant.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ User.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ enums
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ RoleType.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ PlantShopApplication.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ repository
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderRepository.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ PlantRepository.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserRepository.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ seed
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ DatabaseSeeder$Credential.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ DatabaseSeeder.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ service
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ impl
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ UserDetailsServiceImpl.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ util
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ StringUtils.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ V1__init_schema.sql
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ static
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ style.css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon.svg
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ app.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ templates
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ cart.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ fragments
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ base.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ login.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ plants
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ show.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ profile.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ register.html
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ generated-sources
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ annotations
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ generated-test-sources
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test-annotations
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ maven-archiver
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ pom.properties
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ maven-status
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ maven-compiler-plugin
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ compile
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default-compile
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ createdFiles.lst
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ inputFiles.lst
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ testCompile
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ default-testCompile
‚îÇ¬†¬† ‚îÇ¬†¬†             ‚îú‚îÄ‚îÄ createdFiles.lst
‚îÇ¬†¬† ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ inputFiles.lst
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ plant-shop-jpa-spring-boot-hibernate-security-1.0.0.jar
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ plant-shop-jpa-spring-boot-hibernate-security-1.0.0.jar.original
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test-classes
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ com
‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬†             ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ service
‚îú‚îÄ‚îÄ tmp.txt
‚îî‚îÄ‚îÄ users.txt

86 directories, 83 files
