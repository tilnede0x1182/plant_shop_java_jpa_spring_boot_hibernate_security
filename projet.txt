# target/classes/static/index.html
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>OrganisationSim - Accueil</title>
	<link rel="icon" type="image/x-icon" href="favicon/organisation-sim.svg">
  <link rel="stylesheet" href="style/main.css">
</head>
<body>

<!-- üîó Barre de navigation globale -->
<nav class="navbar">
  <a href="index.html" class="logo">OrganisationSim</a>
  <a href="constraints.html">Cr√©er un projet</a>
  <a href="projects.html">Liste des projets</a>
</nav>

<header>
  <h1>Bienvenue sur OrganisationSim</h1>
</header>

<div class="container">
  <h2>Tableau r√©capitulatif (Diagramme de Pert simplifi√©)</h2>

  <table class="pert-table">
    <thead>
      <tr>
        <th>√âtape</th>
        <th>Responsable</th>
        <th>Dur√©e estim√©e</th>
        <th>Pr√©requis</th>
      </tr>
    </thead>
    <tbody id="pertTableBody">
      <tr>
        <td>Analyse</td>
        <td>Chef de projet</td>
        <td>3 jours</td>
        <td>-</td>
      </tr>
      <tr>
        <td>Conception</td>
        <td>Architecte</td>
        <td>5 jours</td>
        <td>Analyse</td>
      </tr>
      <tr>
        <td>D√©veloppement</td>
        <td>√âquipe Dev</td>
        <td>10 jours</td>
        <td>Conception</td>
      </tr>
      <tr>
        <td>Recette</td>
        <td>QA</td>
        <td>4 jours</td>
        <td>D√©veloppement</td>
      </tr>
    </tbody>
  </table>
</div>

</body>
</html>

# target/classes/templates/login.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      layout:decorate="~{fragments/base}"
      th:with="title='Connexion'">
<head>
    <title>PlantShop | Connexion</title>
</head>
<body>
<div layout:fragment="content">
    <section class="container pt-5 mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0 text-center">Connexion</h4>
                    </div>
                    <div class="card-body p-4">

                        <div th:if="${param.error}" class="alert alert-danger">
                            Identifiants invalides
                        </div>

                        <form th:action="@{/login}" method="post">
                            <div class="mb-3">
                                <label for="username" class="form-label">Email</label>
                                <input type="text" class="form-control" id="username" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Mot de passe</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <button type="submit" class="btn btn-success w-100">Se connecter</button>
                        </form>

												<div class="mt-3 text-center">
													<span>Pas encore de compte ?&nbsp;</span>
													<a th:href="@{/register}" class="text-success text-decoration-none">Inscrivez-vous !</a>
											</div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
</body>
</html>

# target/classes/templates/admin/plants/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Gestion des plantes'">

<head>
	<title>PlantShop | Gestion des plantes</title>
</head>

<body>
	<div layout:fragment="content">
		<div class="container pt-5 mt-5">
			<h1 class="mb-4">Gestion des Plantes</h1>

			<div th:if="${userRoleString == 'admin'}" class="mb-3">
				<a href="/admin/plants/new" class="btn btn-primary">Ajouter une plante</a>
			</div>

			<table class="table table-striped table-hover">
				<thead class="table-dark">
					<tr>
						<th>Nom</th>
						<th>Prix</th>
						<th>Stock</th>
						<th class="text-center">Actions</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="plant : ${plants}">
						<td><a  class="product-link" th:href="@{'/plants/' + ${plant.id}}" th:text="${plant.name}">Nom</a></td>
						<td th:text="${plant.price} + ' ‚Ç¨'">0.00 ‚Ç¨</td>
						<td th:text="${plant.stock}">0</td>
						<td class="text-center">
							<div class="d-flex justify-content-center gap-2">
								<a th:href="@{'/admin/plants/' + ${plant.id} + '/edit'}" class="btn btn-warning btn-sm">‚úè Modifier</a>
								<form th:action="@{'/admin/plants/' + ${plant.id}}" method="post"
									onsubmit="return confirm('Supprimer cette plante ?');">
									<input type="hidden" name="_method" value="delete" />
									<button class="btn btn-danger btn-sm">üóë Supprimer</button>
								</form>
							</div>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</body>

</html>

# target/classes/templates/admin/plants/edit.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Modifier plante'">
<head>
    <title>PlantShop | Modifier Plante</title>
</head>
<body>
<div layout:fragment="content">
    <div class="container pt-5 mt-5">
        <h1>√âditer la Plante</h1>
        <div th:replace="admin/plants/form :: plantForm(${plant})"></div>
    </div>
</div>
</body>
</html>

# target/classes/templates/admin/plants/new.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Nouvelle plante'">
<head>
    <title>PlantShop | Nouvelle Plante</title>
</head>
<body>
<div layout:fragment="content">
    <div class="container pt-5 mt-5">
        <h1>PlantShop | Nouvelle Plante (Admin)</h1>
        <div th:replace="admin/plants/form :: plantForm(${plant})"></div>
    </div>
</div>
</body>
</html>

# target/classes/templates/admin/plants/form.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<body>
<div th:fragment="plantForm(plant)">
    <form th:object="${plant}" th:action="${plant.id != null} ? @{'/admin/plants/' + ${plant.id}} : @{/admin/plants}" method="post">

        <div class="mb-3">
            <label class="form-label">Nom de la plante</label>
            <input type="text" class="form-control" th:field="*{name}"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Prix (‚Ç¨)</label>
            <input type="number" class="form-control" step="0.01" th:field="*{price}"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea class="form-control" rows="4" th:field="*{description}"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Stock (unit√©s)</label>
            <input type="number" class="form-control" th:field="*{stock}"/>
        </div>

        <button class="btn btn-primary" th:text="${plant.id != null} ? 'Mettre √† jour' : 'Cr√©er'">Cr√©er</button>
    </form>
</div>
</body>
</html>

# target/classes/templates/admin/users/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}"
	th:with="title='Gestion des utilisateurs'">

<head>
	<title>PlantShop | Utilisateurs</title>
</head>

<body>
	<div layout:fragment="content">
		<div class="container pt-5 mt-5">
			<h1 class="mb-4">Gestion des Utilisateurs</h1>

			<table class="table table-striped table-hover">
				<thead class="table-dark">
					<tr>
						<th>Name</th>
						<th>Email</th>
						<th>Administrateur</th>
						<th class="text-center">Actions</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="user : ${users}">
						<td th:text="${user.name}">name</td>
						<td th:text="${user.email}">email</td>
						<td>
							<span th:class="${user.getRole().toString().toLowerCase() == 'admin'} ? 'badge bg-success' : 'badge bg-secondary'"
							th:text="${user.getRole().toString().toLowerCase() == 'admin'} ? 'Oui' : 'Non'">
							Non
							</span>
						</td>
						<td class="text-center">
							<div class="d-flex justify-content-center gap-2">
								<a th:href="@{'/admin/users/' + ${user.id} + '/edit'}" class="btn btn-warning btn-sm">‚úè Modifier</a>
								<form th:if="${#authentication.name != user.email}" th:action="@{'/admin/users/' + ${user.id}}"
									method="post" onsubmit="return confirm('Supprimer cet utilisateur ?');">
									<input type="hidden" name="_method" value="delete" />
									<button class="btn btn-danger btn-sm">üóë Supprimer</button>
								</form>
							</div>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</body>

</html>

# target/classes/templates/admin/users/edit.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Modifier utilisateur'">

<head>
	<title>PlantShop | Modifier utilisateur</title>
</head>

<body>
	<div layout:fragment="content">
		<div class="container pt-5 mt-5">
			<h1>Modifier l'utilisateur</h1>

			<form th:action="@{'/admin/users/' + ${user.id}}" th:object="${user}" method="post">
				<input type="hidden" name="_method" value="patch" />

				<div th:if="${#fields.hasErrors('*')}" class="alert alert-danger">
					<ul>
						<li th:each="err : ${#fields.errors('*')}" th:text="${err}">Erreur</li>
					</ul>
				</div>

				<div class="mb-3">
					<label for="email" class="form-label">Email</label>
					<input id="email" type="email" class="form-control" th:field="*{email}" />
				</div>

				<div class="mb-3">
					<label for="name" class="form-label">Nom</label>
					<input id="name" type="text" class="form-control" th:field="*{name}" />
				</div>

				<div class="mb-3 form-check">
					<input type="hidden" id="roleInput" name="role" th:value="${user.getRole().name()}" />
					<input id="admin" type="checkbox" class="form-check-input" th:checked="${user.getRole().name() == 'ADMIN'}"
						onchange="document.getElementById('roleInput').value = this.checked ? 'ADMIN' : 'USER'" />
					<label for="admin" class="form-check-label">Administrateur ?</label>
				</div>


				<button type="submit" class="btn btn-primary">Enregistrer</button>
			</form>
		</div>
	</div>
</body>

</html>

# target/classes/templates/plants/show.html
<!DOCTYPE html>
<html layout:decorate="~{fragments/base}" xmlns:th="http://www.thymeleaf.org"
	th:with="title='PlantShop | ' + ${plant.name}">

<head>
	<meta charset="UTF-8">
	<title th:text="'PlantShop | ' + ${plant.name}">PlantShop</title>
</head>

<div layout:fragment="content">
	<div class="container">
		<h1 class="mb-4">üå± D√©tail de la plante</h1>

		<div class="card mb-4 shadow-sm">
			<div class="card-body">
				<h2 class="card-title" th:text="${plant.name}">Nom de la plante</h2>
				<p class="card-text" th:text="${plant.description}">Description</p>

				<ul class="list-group list-group-flush mb-3">
					<li class="list-group-item">
						<strong>Cat√©gorie :</strong> <span th:text="${plant.category}">Cat√©gorie</span>
					</li>
					<li class="list-group-item">
						<strong>Prix :</strong> <span th:text="${plant.price}">0.00</span> ‚Ç¨
					</li>
					<li class="list-group-item">
						<strong>Stock disponible :</strong> <span th:text="${plant.stock}">0</span>
					</li>
				</ul>

				<div class="d-flex flex-wrap gap-2">
					<a href="/plants" class="btn btn-secondary">Retour √† la page d'acceuil</a>
					<button type="button" class="btn btn-success add-to-cart" th:data-id="${plant.id}"
						th:data-name="${plant.name}" th:data-price="${plant.price}">
						Ajouter au panier
					</button>
					<div th:if="${userRoleString == 'admin'}" class="d-flex gap-2">
						<a th:href="@{'/admin/plants/' + ${plant.id} + '/edit'}" class="btn btn-warning">Modifier</a>
						<form th:action="@{'/admin/plants/' + ${plant.id}}" method="post"
							onsubmit="return confirm('Supprimer cette plante ?');">
							<input type="hidden" name="_method" value="delete" />
							<button type="submit" class="btn btn-danger">Supprimer</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const load = () => JSON.parse(localStorage.getItem('cart') || '[]');
			const save = c => localStorage.setItem('cart', JSON.stringify(c));

			const btn = document.querySelector('.add-to-cart');
			if (btn) {
				btn.addEventListener('click', e => {
					e.preventDefault();
					const id = btn.dataset.id;
					const name = btn.dataset.name;
					const price = parseFloat(btn.dataset.price);

					const cart = load();
					const item = cart.find(i => i.id == id);
					item ? item.qty++ : cart.push({id, name, price, qty: 1});
					save(cart);
					refreshCart();
				});
			}
		});
	</script>
</div>

</html>

# target/classes/templates/plants/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Liste des plantes'">

<head>
	<title>PlantShop | Acceuil</title>
</head>

<body>
	<div layout:fragment="content">
		<section class="container pt-5 mt-5">
			<div th:if="${userRoleString == 'admin'}" class="mb-3">
				<a href="/admin/plants/new" class="btn btn-primary">Ajouter une plante</a>
			</div>

			<div class="row">
				<div th:each="plant : ${plants}" class="col-md-4 mb-4">
					<div class="card h-100 plant-card" th:data-id="${plant.id}">
						<div class="card-body position-relative">
							<h5 class="card-title" th:text="${plant.name}">Nom</h5>
							<p class="card-text" th:text="${plant.description}">Description</p>
							<p class="text-muted">Prix¬†: <span th:text="${plant.price}">0.0</span>¬†‚Ç¨</p>
							<p class="text-muted">Stock¬†: <span th:text="${plant.stock}">0</span></p>

							<div class="d-flex gap-2">
								<button type="button" class="btn btn-success flex-grow-1 add-to-cart" th:data-id="${plant.id}" style="z-index: 1; position: relative;"
									th:data-name="${plant.name}" th:data-price="${plant.price}">
									Ajouter au panier
								</button>
							</div>
						</div>
					</div>
				</div>
		</section>
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const load = () => JSON.parse(localStorage.getItem('cart') || '[]');
				const save = c => localStorage.setItem('cart', JSON.stringify(c));

				// Bouton ajouter au panier
				document.querySelectorAll('.add-to-cart').forEach(btn => {
					btn.addEventListener('click', e => {
						e.stopPropagation();   // bloque la remont√©e vers l‚Äô√©l√©ment <a>
						e.preventDefault();    // annule la navigation
						const id = btn.dataset.id;
						const name = btn.dataset.name;
						const price = parseFloat(btn.dataset.price);

						const cart = load();
						const item = cart.find(i => i.id == id);
						item ? item.qty++ : cart.push({id, name, price, qty: 1});
						save(cart);
						refreshCart();                 // fonction d√©j√† d√©finie dans base.html
					});
				});

				// Navigation vers la fiche plante
				document.querySelectorAll('.plant-card').forEach(card => {
					card.addEventListener('click', () => {
						const id = card.dataset.id;
						window.location.href = "/plants/" + id;
					});
				});
			});
		</script>
	</div>
</body>

</html>

# target/classes/templates/register.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      layout:decorate="~{fragments/base}"
      th:with="title='Inscription'">
<head>
    <title>PlantShop | Inscription</title>
</head>
<body>
    <div layout:fragment="content">
        <section class="container pt-5 mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card shadow">
                        <div class="card-header bg-success text-white">
                            <h4 class="mb-0">Cr√©er un compte</h4>
                        </div>
                        <div class="card-body">
                            <form th:action="@{/register}" th:object="${user}" method="post">
                                <div class="mb-3">
                                    <label class="form-label">Nom complet</label>
                                    <input type="text" class="form-control" th:field="*{name}" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Adresse email</label>
                                    <input type="email" class="form-control" th:field="*{email}" required>
                                    <small class="text-danger" th:if="${#fields.hasErrors('email')}" th:errors="*{email}"></small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Mot de passe</label>
                                    <input type="password" class="form-control" th:field="*{password}" required>
                                </div>
                                <button type="submit" class="btn btn-success w-100">S'inscrire</button>
                            </form>
                            <hr>
                            <p class="text-center mb-0">
                                D√©j√† un compte ?
																&nbsp;
                                <a th:href="@{/login}" class="text-success">Se connecter</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>

# target/classes/templates/orders/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Mes commandes'">

<head>
	<title>PlantShop | Mes commandes</title>
</head>

<body>
	<div layout:fragment="content">
		<main class="container pt-5 mt-5">
			<h2 class="mb-4">üì¶ Mes commandes</h2>

			<div th:if="${#lists.isEmpty(orders)}">
				<p>Aucune commande pour le moment.</p>
			</div>

			<div th:each="order, iterStat : ${orders}" class="card mb-3">
				<div class="card-body">
					<h5 class="card-title">
						Commande n¬∞ <span th:text="${orders.size() - iterStat.index}">1</span>
					</h5>
					<p class="card-text">
						<!-- <span th:text="${order.createdAt}">date</span> -->
						<!-- <span th:text="${#temporals.format(order.createdAt, 'dd/MM/yyyy √† HH:mm')}">date</span> -->
						Pass√©e le <span th:text="${order.createdAt != null ? #temporals.format(order.createdAt, 'dd/MM/yyyy HH:mm') : 'Date inconnue'}">date</span> ‚Äì
						Total : <strong th:text="${#numbers.formatDecimal(order.totalPrice, 1, 'POINT', 2, 'POINT')} + ' ‚Ç¨'">0.00
							‚Ç¨</strong>
					</p>

					<ul>
						<li th:each="item : ${order.items}">
							<span th:text="${item.plant.name}">Nom</span> √ó
							<span th:text="${item.quantity}">1</span>
						</li>
					</ul>
				</div>
			</div>
		</main>
	</div>
</body>

</html>

# target/classes/templates/cart.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Panier'">

<head>
	<title>PlantShop | Panier</title>
</head>

<body>
	<div layout:fragment="content">
		<section class="container pt-5 mt-5">
			<h2 class="mb-4">üõí Votre panier</h2>

			<div id="checkoutMessage" class="alert d-none" role="alert"></div>

			<div class="table-responsive">
				<table class="table align-middle">
					<thead>
						<tr>
							<th>Produit</th>
							<th>Prix¬†(‚Ç¨)</th>
							<th>Quantit√©</th>
							<th>Sous‚Äëtotal¬†(‚Ç¨)</th>
							<th></th>
						</tr>
					</thead>
					<tbody id="cartBody">
						<tr id="emptyRow">
							<td colspan="5" class="text-center">Votre panier est vide.</td>
						</tr>
					</tbody>
					<tfoot class="table-light">
						<tr>
							<th colspan="3" class="text-end">Total&nbsp;:</th>
							<th id="cartTotal">0.00</th>
							<th></th>
						</tr>
					</tfoot>
				</table>
			</div>

			<div class="text-start">
				<form id="checkoutForm">
					<button type="submit" class="btn btn-success">Terminer la commande</button>
				</form>
				<div id="checkoutMessage" class="mt-3"></div>
			</div>
		</section>
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const body = document.getElementById('cartBody');
				const totalE = document.getElementById('cartTotal');
				const countE = document.querySelectorAll('.cart-count');

				const load = () => JSON.parse(localStorage.getItem('cart') || '[]');
				const save = c => localStorage.setItem('cart', JSON.stringify(c));

				function render() {
					const cart = load();
					body.innerHTML = '';
					let total = 0;

					if (cart.length === 0) {
						body.innerHTML = '<tr><td colspan="5" class="text-center">Votre panier est vide.</td></tr>';
					} else {
						cart.forEach((item, i) => {
							const sub = item.price * item.qty;
							total += sub;
							body.insertAdjacentHTML('beforeend', `
							<tr>
								<td><a href="/plants/${item.id}" class="product-link">${item.name}</a></td>
								<td>${item.price.toFixed(2)}</td>
								<td>
									<input type="number"
										min="1"
										onkeydown="return event.key !== 'e' && event.key !== '-'"
										value="${item.qty}"
										class="form-control form-control-sm qty-input"
										style="width:80px;" data-i="${i}">
								</td>
								<td>${sub.toFixed(2)}</td>
								<td><button class="btn btn-sm btn-danger" data-i="${i}">‚úï</button></td>
							</tr>
						`);
						});
						body.querySelectorAll('.qty-input').forEach(input => {
							input.addEventListener('input', updateQty);
							input.addEventListener('blur', updateQty);
						});
					}
					totalE.textContent = total.toFixed(2);
					countE.forEach(e => e.textContent = cart.reduce((s, it) => s + it.qty, 0));
				}

				body.addEventListener('click', e => {
					if (e.target.matches('button[data-i]')) {
						const cart = load();
						cart.splice(e.target.dataset.i, 1);
						save(cart);
						render();
					}
				});

				document.getElementById('checkoutForm')?.addEventListener('submit', async e => {
					e.preventDefault();

					if ("[[${userRole}]]" === "visitor") {
						window.location.href = "/login";
						return;
					}

					const cart = JSON.parse(localStorage.getItem('cart') || '[]');
					const msgEl = document.getElementById('checkoutMessage');
					msgEl.className = 'alert d-none';

					if (cart.length === 0) {
						msgEl.textContent = "Votre panier est vide.";
						msgEl.className = "alert alert-danger";
						return;
					}

					try {
						const res = await fetch('/orders/checkout', {
							method: 'POST',
							headers: {'Content-Type': 'application/json'},
							body: JSON.stringify(cart)
						});
						const text = await res.text();

						if (res.ok && text === "OK") {
							localStorage.removeItem('cart');
							refreshCart();
							msgEl.textContent = "Commande valid√©e ! Redirection‚Ä¶";
							msgEl.className = "alert alert-success";
							setTimeout(() => window.location.href = "/orders", 0);
						} else {
							msgEl.textContent = "Erreur lors de la commande : " + text;
							msgEl.className = "alert alert-danger";
						}
					} catch (err) {
						msgEl.textContent = "Erreur r√©seau.";
						msgEl.className = "alert alert-danger";
					}
				});

				function updateQty(e) {
					const i = e.target.dataset.i;
					let val = parseInt(e.target.value);

					if (isNaN(val) || val < 1) val = 1;
					e.target.value = val;

					const cart = load();
					cart[i].qty = val;
					save(cart);
					render();
				}

				render();
				body.querySelectorAll('.qty-input').forEach(input => {
					input.addEventListener('input', updateQty);
					input.addEventListener('blur', updateQty);
				}); g
			});
		</script>
	</div>
</body>

</html>

# target/classes/templates/profile/profile_edit.html
<!DOCTYPE html>
<html  lang="fr"
       xmlns:th="http://www.thymeleaf.org"
       layout:decorate="~{fragments/base}"
       th:with="title='Modifier mon profil'">

<head>
  <meta charset="UTF-8">
  <title>Modifier | PlantShop</title>
</head>

<body>
<div layout:fragment="content">
  <main class="container pt-5 mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card shadow">
          <div class="card-header bg-success text-white">
            <h2 class="h5 mb-0">Modifier mon profil</h2>
          </div>

          <form th:action="@{/my_profile/edit}" th:object="${user}" method="post"
                class="card-body needs-validation" novalidate>

            <div class="mb-3">
              <label class="form-label">Nom complet</label>
              <input type="text" class="form-control" th:field="*{name}" required>
            </div>

            <div class="mb-3">
              <label class="form-label">Email</label>
              <input type="email" class="form-control" th:field="*{email}" required>
            </div>

            <div class="mb-3">
              <label class="form-label">Nouveau mot de passe
                     <small class="text-muted">(laissez vide pour ne pas changer)</small>
              </label>
              <input type="password" class="form-control" th:field="*{password}">
            </div>

            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-success flex-grow-1">Enregistrer</button>
              <a href="/my_profile" class="btn btn-outline-secondary flex-grow-1">Annuler</a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </main>
</div>
</body>
</html>

# target/classes/templates/profile/profile.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	layout:decorate="~{fragments/base}" th:with="title='Mon Profil'" lang="fr">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Mon Profil | PlantShop</title>
	<link rel="stylesheet" href="/webjars/bootstrap/5.3.2/css/bootstrap.min.css">
	<link rel="stylesheet" href="/css/style.css">
</head>

<body>
	<div layout:fragment="content">
		<main class="container pt-5 mt-5">
			<div class="row justify-content-center">
				<div class="col-md-8">
					<div class="card shadow">
						<div class="card-header bg-success text-white">
							<h2 class="h4 mb-0">Mon Profil</h2>
						</div>
						<div class="card-body">
							<dl class="row">
								<dt class="col-sm-4">Nom complet</dt>
								<dd class="col-sm-8" th:text="${user.name}">-</dd>

								<dt class="col-sm-4">Email</dt>
								<dd class="col-sm-8" th:text="${user.email}">-</dd>
								<div th:if="${userRoleString == 'admin'}" class="d-flex gap-2">
									<dt class="col-sm-4">Administrateur</dt>
									<dd class="col-sm-8">
										<span th:text="${userRoleString == 'admin'} ? 'Oui' : 'Non'">-</span>
									</dd>
								</div>
								<div class="mt-4 text-start">
									<a href="/my_profile/edit" class="btn btn-primary px-5">Modifier</a>
								</div>
							</dl>
						</div>
					</div>
				</div>
			</div>
		</main>
	</div>

	<script src="/webjars/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
	<script src="https://kit.fontawesome.com/a14342fe13.js" crossorigin="anonymous"></script>
</body>

</html>

# target/classes/templates/fragments/base.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<!-- Ic√¥ne du site -->
	<link rel="icon" href="/favicon.ico" type="image/x-icon"/>

	<title>PlantShop | [[${title}]]</title>

	<!-- Bootstrap CSS -->
	<link rel="stylesheet" href="/webjars/bootstrap/5.3.2/css/bootstrap.min.css">

	<!-- Custom CSS -->
	<link rel="stylesheet" th:href="@{/css/style.css}">
</head>

<body>
	<th:block th:with="userRoleString=${userRole}">
		<!-- Navbar -->
		<div th:replace="~{fragments/navbar :: navbar}"></div>
		<div class="container">
			<!-- Messages flash -->
			<div th:if="${message}" class="alert alert-success" th:text="${message}"></div>
			<div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>

			<!-- Contenu principal -->
			<div layout:fragment="content"></div>
		</div>

		<!-- Bootstrap JS -->
		<script src="/webjars/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
		<script src="/js/app.js"></script>
		<script th:inline="javascript">
			function refreshCart() {
				const total = (JSON.parse(localStorage.getItem('cart') || '[]'))
					.reduce((s, i) => s + i.qty, 0);
				document.querySelectorAll('.cart-count').forEach(e => e.textContent = total);
			}
			refreshCart();
			window.addEventListener('storage', e => e.key === 'cart' && refreshCart());
		</script>
	</th:block>

	</body>

</html>

# target/classes/templates/fragments/navbar.html
<nav th:fragment="navbar" class="navbar navbar-expand-lg navbar fixed-top">
	<!-- Navbar -->
	<nav class="navbar navbar-expand-lg mb-4 fixed-top">
		<div class="container">
			<a class="navbar-brand" href="/">üåø PlantShop</a>
			<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
				<span class="navbar-toggler-icon"></span>
			</button>

			<div class="collapse navbar-collapse" id="navbarNav">
				<ul class="navbar-nav me-auto"></ul>
				<ul class="navbar-nav">
					<li th:if="${loggedUserName}" class="navbar-text me-2"
							th:text="${userRoleString == 'admin' ? loggedUserName + ' (Administrateur)' : loggedUserName}">
					</li>
					<li th:if="${userRoleString == 'visitor' || userRoleString == 'user' || userRoleString == 'admin'}"
						class="nav-item">
						<a class="nav-link" href="/cart">Panier (<span class="cart-count">0</span>)</a>
					</li>
					<li th:if="${userRoleString == 'visitor'}" class="nav-item">
						<a class="nav-link" href="/login">Connexion</a>
					</li>
					<li th:if="${userRoleString == 'visitor'}" class="nav-item">
						<a class="nav-link" href="/register">Inscription</a>
					</li>
					<li th:if="${userRoleString == 'user' || userRoleString == 'admin'}" class="nav-item">
						<a class="nav-link" href="/my_profile">Mon Profil</a>
					</li>
					<li th:if="${userRoleString == 'user' || userRoleString == 'admin'}" class="nav-item">
						<a class="nav-link" href="/orders">Mes Commandes</a>
					</li>

					<li th:if="${userRoleString == 'admin'}" class="nav-item dropdown">
						<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
							Admin
						</a>
						<ul class="dropdown-menu">
							<li><a class="dropdown-item" href="/admin/plants">Gestion Plantes</a></li>
							<li><a class="dropdown-item" href="/admin/users">Gestion Utilisateurs</a></li>
						</ul>
					</li>

					<li th:if="${userRoleString == 'user' or userRoleString == 'admin'}" class="nav-item">
						<form th:action="@{/logout}" method="post">
							<button type="submit" class="nav-link btn btn-link">D√©connexion</button>
						</form>
					</li>
				</ul>
			</div>
		</div>
	</nav>
</nav>

# target/classes/application.yml
# -----------------------------
# CONFIGURATION G√âN√âRALE COMMUNE
# S'applique quel que soit le profil actif (dev, seed, prod)
# -----------------------------
server:
  port: 8080 # Port HTTP utilis√© par le serveur int√©gr√© (Tomcat par d√©faut)

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/plant_shop
    username: tilnede0x1182
    password: tilnede0x1182
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false
  sql:
    init:
      mode: never

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.security: DEBUG
---

# -----------------------------
# PROFIL DEV : D√©veloppement local
# Activation avec --spring.profiles.active=dev
# -----------------------------

spring:
  config:
    activate:
      on-profile: dev
  thymeleaf:
    cache: false
  jpa:
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: false
  sql:
    init:
      mode: never

---

# -----------------------------
# PROFIL SEED : Pour initialisation de donn√©es (tests, staging)
# Activation avec --spring.profiles.active=seed
# -----------------------------

spring:
  config:
    activate:
      on-profile: seed
  jpa:
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
  sql:
    init:
      mode: always

---

# -----------------------------
# PROFIL PROD : Production
# Activation avec --spring.profiles.active=prod
# -----------------------------

spring:
  config:
    activate:
      on-profile: prod
  devtools:
    enabled: false
    restart:
      enabled: false
  thymeleaf:
    cache: true
  jpa:
    hibernate:
      ddl-auto: validate
  sql:
    init:
      mode: never

# README.md
# Plant Shop - E-commerce Botanique (JPA/Hibernate Edition)

Application compl√®te de vente de plantes avec architecture modulaire :
- **Backend** : API REST s√©curis√©e avec Spring Boot et persistance JPA/Hibernate
- **Frontend** : Interface React moderne avec gestion d'√©tat

## üõ† Stack Technique Compl√®te

### Backend (Spring Boot)
- **Langage**: Java 17
- **Framework**: Spring Boot 3.1.5 + Spring MVC
- **Persistence**:
  - JPA 3.1 (Jakarta)
  - Hibernate 6.2
  - PostgreSQL 42.7.3 (via driver JDBC)
- **S√©curit√©**:
  - Spring Security 6
  - JWT Authentication
- **Build**: Maven
- **Templates**: Thymeleaf 3.1

### Frontend
- **Core**: React 18 (via CDN)
- **UI/UX**:
  - Bootstrap 5.3 (Th√®me personnalis√©)

## Fonctionnalit√©s Cl√©s

### S√©curit√©
- Double couche JWT (Access + Refresh Tokens)
- Validation c√¥t√© serveur
- Protection CSRF/CORS

# Makefile
# D√©finition des variables
APP_NAME = plant-shop-jpa-spring-boot-hibernate-security
DB_NAME = plant_shop
DB_USER = tilnede0x1182
DB_PASSWORD = tilnede0x1182
DB_HOST = localhost
DB_PORT = 5432
PROFILE = dev

# T√¢ches par d√©faut
default: help

# Affiche l'aide
help:
	@echo "Usage:"
	@echo "  make help         Affiche cette aide"
	@echo "  make run          Lance l'application"
	@echo "  make test         Ex√©cute les tests"
	@echo "  make db-create    Cr√©e la base de donn√©es"
	@echo "  make db-drop      Supprime la base de donn√©es"
	@echo "  make db-migrate   Applique les migrations de base de donn√©es"
	@echo "  make clean        Nettoie les fichiers g√©n√©r√©s"

# Installaton des d√©pendances
install:
	clear && mvn clean compile

# Lance l'application
run:
	clear && mvn -q spring-boot:run -Dspring-boot.run.profiles=$(PROFILE) | grep -E "WARN|ERROR|DEBUG :"

prod: clean
	clear && mvn -q spring-boot:run -Dspring-boot.run.profiles=prod | grep -E "WARN|ERROR"

# Ex√©cute les tests
test:
	clear && mvn -q test

# Nettoie les fichiers g√©n√©r√©s
clean:
	clear && mvn -q clean

# Cr√©e les tables de la base de donn√©es
db-create: seed

# Supprime les tables de la base de donn√©es
db-drop:
	sudo -u postgres psql -d $(DB_NAME) -c "DROP SCHEMA public CASCADE;"
	sudo -u postgres psql -d $(DB_NAME) -c "CREATE SCHEMA public;"

# Met √† jour les d√©pendances et reconstruit le projet
update: reset

# R√©initialise la base de donn√©es
reset: seed

# T√¢che pour seed la base de donn√©es (si vous avez un m√©canisme de seed)
seed:
	# clear && mvn -q spring-boot:run -Dspring-boot.run.profiles=seed
	clear && mvn -q spring-boot:run -Dspring-boot.run.profiles=seed | grep -E "WARN|ERROR|DEBUG :"
	# clear && mvn -q spring-boot:run -Dspring-boot.run.profiles=seed | grep -E "WARN|ERROR|DEBUG :|DEBUG"

.PHONY: test clean db-create db-drop update reset seed

# src/main/resources/static/index.html
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>OrganisationSim - Accueil</title>
	<link rel="icon" type="image/x-icon" href="favicon/organisation-sim.svg">
  <link rel="stylesheet" href="style/main.css">
</head>
<body>

<!-- üîó Barre de navigation globale -->
<nav class="navbar">
  <a href="index.html" class="logo">OrganisationSim</a>
  <a href="constraints.html">Cr√©er un projet</a>
  <a href="projects.html">Liste des projets</a>
</nav>

<header>
  <h1>Bienvenue sur OrganisationSim</h1>
</header>

<div class="container">
  <h2>Tableau r√©capitulatif (Diagramme de Pert simplifi√©)</h2>

  <table class="pert-table">
    <thead>
      <tr>
        <th>√âtape</th>
        <th>Responsable</th>
        <th>Dur√©e estim√©e</th>
        <th>Pr√©requis</th>
      </tr>
    </thead>
    <tbody id="pertTableBody">
      <tr>
        <td>Analyse</td>
        <td>Chef de projet</td>
        <td>3 jours</td>
        <td>-</td>
      </tr>
      <tr>
        <td>Conception</td>
        <td>Architecte</td>
        <td>5 jours</td>
        <td>Analyse</td>
      </tr>
      <tr>
        <td>D√©veloppement</td>
        <td>√âquipe Dev</td>
        <td>10 jours</td>
        <td>Conception</td>
      </tr>
      <tr>
        <td>Recette</td>
        <td>QA</td>
        <td>4 jours</td>
        <td>D√©veloppement</td>
      </tr>
    </tbody>
  </table>
</div>

</body>
</html>

# src/main/resources/templates/login.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      layout:decorate="~{fragments/base}"
      th:with="title='Connexion'">
<head>
    <title>PlantShop | Connexion</title>
</head>
<body>
<div layout:fragment="content">
    <section class="container pt-5 mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0 text-center">Connexion</h4>
                    </div>
                    <div class="card-body p-4">

                        <div th:if="${param.error}" class="alert alert-danger">
                            Identifiants invalides
                        </div>

                        <form th:action="@{/login}" method="post">
                            <div class="mb-3">
                                <label for="username" class="form-label">Email</label>
                                <input type="text" class="form-control" id="username" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Mot de passe</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <button type="submit" class="btn btn-success w-100">Se connecter</button>
                        </form>

												<div class="mt-3 text-center">
													<span>Pas encore de compte ?&nbsp;</span>
													<a th:href="@{/register}" class="text-success text-decoration-none">Inscrivez-vous !</a>
											</div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
</body>
</html>

# src/main/resources/templates/admin/plants/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Gestion des plantes'">

<head>
	<title>PlantShop | Gestion des plantes</title>
</head>

<body>
	<div layout:fragment="content">
		<div class="container pt-5 mt-5">
			<h1 class="mb-4">Gestion des Plantes</h1>

			<div th:if="${userRoleString == 'admin'}" class="mb-3">
				<a href="/admin/plants/new" class="btn btn-primary">Ajouter une plante</a>
			</div>

			<table class="table table-striped table-hover">
				<thead class="table-dark">
					<tr>
						<th>Nom</th>
						<th>Prix</th>
						<th>Stock</th>
						<th class="text-center">Actions</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="plant : ${plants}">
						<td><a  class="product-link" th:href="@{'/plants/' + ${plant.id}}" th:text="${plant.name}">Nom</a></td>
						<td th:text="${plant.price} + ' ‚Ç¨'">0.00 ‚Ç¨</td>
						<td th:text="${plant.stock}">0</td>
						<td class="text-center">
							<div class="d-flex justify-content-center gap-2">
								<a th:href="@{'/admin/plants/' + ${plant.id} + '/edit'}" class="btn btn-warning btn-sm">‚úè Modifier</a>
								<form th:action="@{'/admin/plants/' + ${plant.id}}" method="post"
									onsubmit="return confirm('Supprimer cette plante ?');">
									<input type="hidden" name="_method" value="delete" />
									<button class="btn btn-danger btn-sm">üóë Supprimer</button>
								</form>
							</div>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</body>

</html>

# src/main/resources/templates/admin/plants/edit.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Modifier plante'">
<head>
    <title>PlantShop | Modifier Plante</title>
</head>
<body>
<div layout:fragment="content">
    <div class="container pt-5 mt-5">
        <h1>√âditer la Plante</h1>
        <div th:replace="admin/plants/form :: plantForm(${plant})"></div>
    </div>
</div>
</body>
</html>

# src/main/resources/templates/admin/plants/new.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Nouvelle plante'">
<head>
    <title>PlantShop | Nouvelle Plante</title>
</head>
<body>
<div layout:fragment="content">
    <div class="container pt-5 mt-5">
        <h1>PlantShop | Nouvelle Plante (Admin)</h1>
        <div th:replace="admin/plants/form :: plantForm(${plant})"></div>
    </div>
</div>
</body>
</html>

# src/main/resources/templates/admin/plants/form.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<body>
<div th:fragment="plantForm(plant)">
    <form th:object="${plant}" th:action="${plant.id != null} ? @{'/admin/plants/' + ${plant.id}} : @{/admin/plants}" method="post">

        <div class="mb-3">
            <label class="form-label">Nom de la plante</label>
            <input type="text" class="form-control" th:field="*{name}"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Prix (‚Ç¨)</label>
            <input type="number" class="form-control" step="0.01" th:field="*{price}"/>
        </div>

        <div class="mb-3">
            <label class="form-label">Description</label>
            <textarea class="form-control" rows="4" th:field="*{description}"></textarea>
        </div>

        <div class="mb-3">
            <label class="form-label">Stock (unit√©s)</label>
            <input type="number" class="form-control" th:field="*{stock}"/>
        </div>

        <button class="btn btn-primary" th:text="${plant.id != null} ? 'Mettre √† jour' : 'Cr√©er'">Cr√©er</button>
    </form>
</div>
</body>
</html>

# src/main/resources/templates/admin/users/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}"
	th:with="title='Gestion des utilisateurs'">

<head>
	<title>PlantShop | Utilisateurs</title>
</head>

<body>
	<div layout:fragment="content">
		<div class="container pt-5 mt-5">
			<h1 class="mb-4">Gestion des Utilisateurs</h1>

			<table class="table table-striped table-hover">
				<thead class="table-dark">
					<tr>
						<th>Name</th>
						<th>Email</th>
						<th>Administrateur</th>
						<th class="text-center">Actions</th>
					</tr>
				</thead>
				<tbody>
					<tr th:each="user : ${users}">
						<td th:text="${user.name}">name</td>
						<td th:text="${user.email}">email</td>
						<td>
							<span th:class="${user.getRole().toString().toLowerCase() == 'admin'} ? 'badge bg-success' : 'badge bg-secondary'"
							th:text="${user.getRole().toString().toLowerCase() == 'admin'} ? 'Oui' : 'Non'">
							Non
							</span>
						</td>
						<td class="text-center">
							<div class="d-flex justify-content-center gap-2">
								<a th:href="@{'/admin/users/' + ${user.id} + '/edit'}" class="btn btn-warning btn-sm">‚úè Modifier</a>
								<form th:if="${#authentication.name != user.email}" th:action="@{'/admin/users/' + ${user.id}}"
									method="post" onsubmit="return confirm('Supprimer cet utilisateur ?');">
									<input type="hidden" name="_method" value="delete" />
									<button class="btn btn-danger btn-sm">üóë Supprimer</button>
								</form>
							</div>
						</td>
					</tr>
				</tbody>
			</table>
		</div>
	</div>
</body>

</html>

# src/main/resources/templates/admin/users/edit.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Modifier utilisateur'">

<head>
	<title>PlantShop | Modifier utilisateur</title>
</head>

<body>
	<div layout:fragment="content">
		<div class="container pt-5 mt-5">
			<h1>Modifier l'utilisateur</h1>

			<form th:action="@{'/admin/users/' + ${user.id}}" th:object="${user}" method="post">
				<input type="hidden" name="_method" value="patch" />

				<div th:if="${#fields.hasErrors('*')}" class="alert alert-danger">
					<ul>
						<li th:each="err : ${#fields.errors('*')}" th:text="${err}">Erreur</li>
					</ul>
				</div>

				<div class="mb-3">
					<label for="email" class="form-label">Email</label>
					<input id="email" type="email" class="form-control" th:field="*{email}" />
				</div>

				<div class="mb-3">
					<label for="name" class="form-label">Nom</label>
					<input id="name" type="text" class="form-control" th:field="*{name}" />
				</div>

				<div class="mb-3 form-check">
					<input type="hidden" id="roleInput" name="role" th:value="${user.getRole().name()}" />
					<input id="admin" type="checkbox" class="form-check-input" th:checked="${user.getRole().name() == 'ADMIN'}"
						onchange="document.getElementById('roleInput').value = this.checked ? 'ADMIN' : 'USER'" />
					<label for="admin" class="form-check-label">Administrateur ?</label>
				</div>


				<button type="submit" class="btn btn-primary">Enregistrer</button>
			</form>
		</div>
	</div>
</body>

</html>

# src/main/resources/templates/plants/show.html
<!DOCTYPE html>
<html layout:decorate="~{fragments/base}" xmlns:th="http://www.thymeleaf.org"
	th:with="title='PlantShop | ' + ${plant.name}">

<head>
	<meta charset="UTF-8">
	<title th:text="'PlantShop | ' + ${plant.name}">PlantShop</title>
</head>

<div layout:fragment="content">
	<div class="container">
		<h1 class="mb-4">üå± D√©tail de la plante</h1>

		<div class="card mb-4 shadow-sm">
			<div class="card-body">
				<h2 class="card-title" th:text="${plant.name}">Nom de la plante</h2>
				<p class="card-text" th:text="${plant.description}">Description</p>

				<ul class="list-group list-group-flush mb-3">
					<li class="list-group-item">
						<strong>Cat√©gorie :</strong> <span th:text="${plant.category}">Cat√©gorie</span>
					</li>
					<li class="list-group-item">
						<strong>Prix :</strong> <span th:text="${plant.price}">0.00</span> ‚Ç¨
					</li>
					<li class="list-group-item">
						<strong>Stock disponible :</strong> <span th:text="${plant.stock}">0</span>
					</li>
				</ul>

				<div class="d-flex flex-wrap gap-2">
					<a href="/plants" class="btn btn-secondary">Retour √† la page d'acceuil</a>
					<button type="button" class="btn btn-success add-to-cart" th:data-id="${plant.id}"
						th:data-name="${plant.name}" th:data-price="${plant.price}">
						Ajouter au panier
					</button>
					<div th:if="${userRoleString == 'admin'}" class="d-flex gap-2">
						<a th:href="@{'/admin/plants/' + ${plant.id} + '/edit'}" class="btn btn-warning">Modifier</a>
						<form th:action="@{'/admin/plants/' + ${plant.id}}" method="post"
							onsubmit="return confirm('Supprimer cette plante ?');">
							<input type="hidden" name="_method" value="delete" />
							<button type="submit" class="btn btn-danger">Supprimer</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', () => {
			const load = () => JSON.parse(localStorage.getItem('cart') || '[]');
			const save = c => localStorage.setItem('cart', JSON.stringify(c));

			const btn = document.querySelector('.add-to-cart');
			if (btn) {
				btn.addEventListener('click', e => {
					e.preventDefault();
					const id = btn.dataset.id;
					const name = btn.dataset.name;
					const price = parseFloat(btn.dataset.price);

					const cart = load();
					const item = cart.find(i => i.id == id);
					item ? item.qty++ : cart.push({id, name, price, qty: 1});
					save(cart);
					refreshCart();
				});
			}
		});
	</script>
</div>

</html>

# src/main/resources/templates/plants/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Liste des plantes'">

<head>
	<title>PlantShop | Acceuil</title>
</head>

<body>
	<div layout:fragment="content">
		<section class="container pt-5 mt-5">
			<div th:if="${userRoleString == 'admin'}" class="mb-3">
				<a href="/admin/plants/new" class="btn btn-primary">Ajouter une plante</a>
			</div>

			<div class="row">
				<div th:each="plant : ${plants}" class="col-md-4 mb-4">
					<div class="card h-100 plant-card" th:data-id="${plant.id}">
						<div class="card-body position-relative">
							<h5 class="card-title" th:text="${plant.name}">Nom</h5>
							<p class="card-text" th:text="${plant.description}">Description</p>
							<p class="text-muted">Prix¬†: <span th:text="${plant.price}">0.0</span>¬†‚Ç¨</p>
							<p class="text-muted">Stock¬†: <span th:text="${plant.stock}">0</span></p>

							<div class="d-flex gap-2">
								<button type="button" class="btn btn-success flex-grow-1 add-to-cart" th:data-id="${plant.id}" style="z-index: 1; position: relative;"
									th:data-name="${plant.name}" th:data-price="${plant.price}">
									Ajouter au panier
								</button>
							</div>
						</div>
					</div>
				</div>
		</section>
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const load = () => JSON.parse(localStorage.getItem('cart') || '[]');
				const save = c => localStorage.setItem('cart', JSON.stringify(c));

				// Bouton ajouter au panier
				document.querySelectorAll('.add-to-cart').forEach(btn => {
					btn.addEventListener('click', e => {
						e.stopPropagation();   // bloque la remont√©e vers l‚Äô√©l√©ment <a>
						e.preventDefault();    // annule la navigation
						const id = btn.dataset.id;
						const name = btn.dataset.name;
						const price = parseFloat(btn.dataset.price);

						const cart = load();
						const item = cart.find(i => i.id == id);
						item ? item.qty++ : cart.push({id, name, price, qty: 1});
						save(cart);
						refreshCart();                 // fonction d√©j√† d√©finie dans base.html
					});
				});

				// Navigation vers la fiche plante
				document.querySelectorAll('.plant-card').forEach(card => {
					card.addEventListener('click', () => {
						const id = card.dataset.id;
						window.location.href = "/plants/" + id;
					});
				});
			});
		</script>
	</div>
</body>

</html>

# src/main/resources/templates/register.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      layout:decorate="~{fragments/base}"
      th:with="title='Inscription'">
<head>
    <title>PlantShop | Inscription</title>
</head>
<body>
    <div layout:fragment="content">
        <section class="container pt-5 mt-5">
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <div class="card shadow">
                        <div class="card-header bg-success text-white">
                            <h4 class="mb-0">Cr√©er un compte</h4>
                        </div>
                        <div class="card-body">
                            <form th:action="@{/register}" th:object="${user}" method="post">
                                <div class="mb-3">
                                    <label class="form-label">Nom complet</label>
                                    <input type="text" class="form-control" th:field="*{name}" required>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Adresse email</label>
                                    <input type="email" class="form-control" th:field="*{email}" required>
                                    <small class="text-danger" th:if="${#fields.hasErrors('email')}" th:errors="*{email}"></small>
                                </div>
                                <div class="mb-3">
                                    <label class="form-label">Mot de passe</label>
                                    <input type="password" class="form-control" th:field="*{password}" required>
                                </div>
                                <button type="submit" class="btn btn-success w-100">S'inscrire</button>
                            </form>
                            <hr>
                            <p class="text-center mb-0">
                                D√©j√† un compte ?
																&nbsp;
                                <a th:href="@{/login}" class="text-success">Se connecter</a>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>
</body>
</html>

# src/main/resources/templates/orders/index.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Mes commandes'">

<head>
	<title>PlantShop | Mes commandes</title>
</head>

<body>
	<div layout:fragment="content">
		<main class="container pt-5 mt-5">
			<h2 class="mb-4">üì¶ Mes commandes</h2>

			<div th:if="${#lists.isEmpty(orders)}">
				<p>Aucune commande pour le moment.</p>
			</div>

			<div th:each="order, iterStat : ${orders}" class="card mb-3">
				<div class="card-body">
					<h5 class="card-title">
						Commande n¬∞ <span th:text="${orders.size() - iterStat.index}">1</span>
					</h5>
					<p class="card-text">
						<!-- <span th:text="${order.createdAt}">date</span> -->
						<!-- <span th:text="${#temporals.format(order.createdAt, 'dd/MM/yyyy √† HH:mm')}">date</span> -->
						Pass√©e le <span th:text="${order.createdAt != null ? #temporals.format(order.createdAt, 'dd/MM/yyyy HH:mm') : 'Date inconnue'}">date</span> ‚Äì
						Total : <strong th:text="${#numbers.formatDecimal(order.totalPrice, 1, 'POINT', 2, 'POINT')} + ' ‚Ç¨'">0.00
							‚Ç¨</strong>
					</p>

					<ul>
						<li th:each="item : ${order.items}">
							<span th:text="${item.plant.name}">Nom</span> √ó
							<span th:text="${item.quantity}">1</span>
						</li>
					</ul>
				</div>
			</div>
		</main>
	</div>
</body>

</html>

# src/main/resources/templates/cart.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" layout:decorate="~{fragments/base}" th:with="title='Panier'">

<head>
	<title>PlantShop | Panier</title>
</head>

<body>
	<div layout:fragment="content">
		<section class="container pt-5 mt-5">
			<h2 class="mb-4">üõí Votre panier</h2>

			<div id="checkoutMessage" class="alert d-none" role="alert"></div>

			<div class="table-responsive">
				<table class="table align-middle">
					<thead>
						<tr>
							<th>Produit</th>
							<th>Prix¬†(‚Ç¨)</th>
							<th>Quantit√©</th>
							<th>Sous‚Äëtotal¬†(‚Ç¨)</th>
							<th></th>
						</tr>
					</thead>
					<tbody id="cartBody">
						<tr id="emptyRow">
							<td colspan="5" class="text-center">Votre panier est vide.</td>
						</tr>
					</tbody>
					<tfoot class="table-light">
						<tr>
							<th colspan="3" class="text-end">Total&nbsp;:</th>
							<th id="cartTotal">0.00</th>
							<th></th>
						</tr>
					</tfoot>
				</table>
			</div>

			<div class="text-start">
				<form id="checkoutForm">
					<button type="submit" class="btn btn-success">Terminer la commande</button>
				</form>
				<div id="checkoutMessage" class="mt-3"></div>
			</div>
		</section>
		<script>
			document.addEventListener('DOMContentLoaded', () => {
				const body = document.getElementById('cartBody');
				const totalE = document.getElementById('cartTotal');
				const countE = document.querySelectorAll('.cart-count');

				const load = () => JSON.parse(localStorage.getItem('cart') || '[]');
				const save = c => localStorage.setItem('cart', JSON.stringify(c));

				function render() {
					const cart = load();
					body.innerHTML = '';
					let total = 0;

					if (cart.length === 0) {
						body.innerHTML = '<tr><td colspan="5" class="text-center">Votre panier est vide.</td></tr>';
					} else {
						cart.forEach((item, i) => {
							const sub = item.price * item.qty;
							total += sub;
							body.insertAdjacentHTML('beforeend', `
							<tr>
								<td><a href="/plants/${item.id}" class="product-link">${item.name}</a></td>
								<td>${item.price.toFixed(2)}</td>
								<td>
									<input type="number"
										min="1"
										onkeydown="return event.key !== 'e' && event.key !== '-'"
										value="${item.qty}"
										class="form-control form-control-sm qty-input"
										style="width:80px;" data-i="${i}">
								</td>
								<td>${sub.toFixed(2)}</td>
								<td><button class="btn btn-sm btn-danger" data-i="${i}">‚úï</button></td>
							</tr>
						`);
						});
						body.querySelectorAll('.qty-input').forEach(input => {
							input.addEventListener('input', updateQty);
							input.addEventListener('blur', updateQty);
						});
					}
					totalE.textContent = total.toFixed(2);
					countE.forEach(e => e.textContent = cart.reduce((s, it) => s + it.qty, 0));
				}

				body.addEventListener('click', e => {
					if (e.target.matches('button[data-i]')) {
						const cart = load();
						cart.splice(e.target.dataset.i, 1);
						save(cart);
						render();
					}
				});

				document.getElementById('checkoutForm')?.addEventListener('submit', async e => {
					e.preventDefault();

					if ("[[${userRole}]]" === "visitor") {
						window.location.href = "/login";
						return;
					}

					const cart = JSON.parse(localStorage.getItem('cart') || '[]');
					const msgEl = document.getElementById('checkoutMessage');
					msgEl.className = 'alert d-none';

					if (cart.length === 0) {
						msgEl.textContent = "Votre panier est vide.";
						msgEl.className = "alert alert-danger";
						return;
					}

					try {
						const res = await fetch('/orders/checkout', {
							method: 'POST',
							headers: {'Content-Type': 'application/json'},
							body: JSON.stringify(cart)
						});
						const text = await res.text();

						if (res.ok && text === "OK") {
							localStorage.removeItem('cart');
							refreshCart();
							msgEl.textContent = "Commande valid√©e ! Redirection‚Ä¶";
							msgEl.className = "alert alert-success";
							setTimeout(() => window.location.href = "/orders", 0);
						} else {
							msgEl.textContent = "Erreur lors de la commande : " + text;
							msgEl.className = "alert alert-danger";
						}
					} catch (err) {
						msgEl.textContent = "Erreur r√©seau.";
						msgEl.className = "alert alert-danger";
					}
				});

				function updateQty(e) {
					const i = e.target.dataset.i;
					let val = parseInt(e.target.value);

					if (isNaN(val) || val < 1) val = 1;
					e.target.value = val;

					const cart = load();
					cart[i].qty = val;
					save(cart);
					render();
				}

				render();
				body.querySelectorAll('.qty-input').forEach(input => {
					input.addEventListener('input', updateQty);
					input.addEventListener('blur', updateQty);
				}); g
			});
		</script>
	</div>
</body>

</html>

# src/main/resources/templates/profile/profile_edit.html
<!DOCTYPE html>
<html  lang="fr"
       xmlns:th="http://www.thymeleaf.org"
       layout:decorate="~{fragments/base}"
       th:with="title='Modifier mon profil'">

<head>
  <meta charset="UTF-8">
  <title>Modifier | PlantShop</title>
</head>

<body>
<div layout:fragment="content">
  <main class="container pt-5 mt-5">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <div class="card shadow">
          <div class="card-header bg-success text-white">
            <h2 class="h5 mb-0">Modifier mon profil</h2>
          </div>

          <form th:action="@{/my_profile/edit}" th:object="${user}" method="post"
                class="card-body needs-validation" novalidate>

            <div class="mb-3">
              <label class="form-label">Nom complet</label>
              <input type="text" class="form-control" th:field="*{name}" required>
            </div>

            <div class="mb-3">
              <label class="form-label">Email</label>
              <input type="email" class="form-control" th:field="*{email}" required>
            </div>

            <div class="mb-3">
              <label class="form-label">Nouveau mot de passe
                     <small class="text-muted">(laissez vide pour ne pas changer)</small>
              </label>
              <input type="password" class="form-control" th:field="*{password}">
            </div>

            <div class="d-flex gap-2">
              <button type="submit" class="btn btn-success flex-grow-1">Enregistrer</button>
              <a href="/my_profile" class="btn btn-outline-secondary flex-grow-1">Annuler</a>
            </div>
          </form>
        </div>
      </div>
    </div>
  </main>
</div>
</body>
</html>

# src/main/resources/templates/profile/profile.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:layout="http://www.ultraq.net.nz/thymeleaf/layout"
	layout:decorate="~{fragments/base}" th:with="title='Mon Profil'" lang="fr">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Mon Profil | PlantShop</title>
	<link rel="stylesheet" href="/webjars/bootstrap/5.3.2/css/bootstrap.min.css">
	<link rel="stylesheet" href="/css/style.css">
</head>

<body>
	<div layout:fragment="content">
		<main class="container pt-5 mt-5">
			<div class="row justify-content-center">
				<div class="col-md-8">
					<div class="card shadow">
						<div class="card-header bg-success text-white">
							<h2 class="h4 mb-0">Mon Profil</h2>
						</div>
						<div class="card-body">
							<dl class="row">
								<dt class="col-sm-4">Nom complet</dt>
								<dd class="col-sm-8" th:text="${user.name}">-</dd>

								<dt class="col-sm-4">Email</dt>
								<dd class="col-sm-8" th:text="${user.email}">-</dd>
								<div th:if="${userRoleString == 'admin'}" class="d-flex gap-2">
									<dt class="col-sm-4">Administrateur</dt>
									<dd class="col-sm-8">
										<span th:text="${userRoleString == 'admin'} ? 'Oui' : 'Non'">-</span>
									</dd>
								</div>
								<div class="mt-4 text-start">
									<a href="/my_profile/edit" class="btn btn-primary px-5">Modifier</a>
								</div>
							</dl>
						</div>
					</div>
				</div>
			</div>
		</main>
	</div>

	<script src="/webjars/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
	<script src="https://kit.fontawesome.com/a14342fe13.js" crossorigin="anonymous"></script>
</body>

</html>

# src/main/resources/templates/fragments/base.html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<!-- Ic√¥ne du site -->
	<link rel="icon" href="/favicon.ico" type="image/x-icon"/>

	<title>PlantShop | [[${title}]]</title>

	<!-- Bootstrap CSS -->
	<link rel="stylesheet" href="/webjars/bootstrap/5.3.2/css/bootstrap.min.css">

	<!-- Custom CSS -->
	<link rel="stylesheet" th:href="@{/css/style.css}">
</head>

<body>
	<th:block th:with="userRoleString=${userRole}">
		<!-- Navbar -->
		<div th:replace="~{fragments/navbar :: navbar}"></div>
		<div class="container">
			<!-- Messages flash -->
			<div th:if="${message}" class="alert alert-success" th:text="${message}"></div>
			<div th:if="${error}" class="alert alert-danger" th:text="${error}"></div>

			<!-- Contenu principal -->
			<div layout:fragment="content"></div>
		</div>

		<!-- Bootstrap JS -->
		<script src="/webjars/bootstrap/5.3.2/js/bootstrap.bundle.min.js"></script>
		<script src="/js/app.js"></script>
		<script th:inline="javascript">
			function refreshCart() {
				const total = (JSON.parse(localStorage.getItem('cart') || '[]'))
					.reduce((s, i) => s + i.qty, 0);
				document.querySelectorAll('.cart-count').forEach(e => e.textContent = total);
			}
			refreshCart();
			window.addEventListener('storage', e => e.key === 'cart' && refreshCart());
		</script>
	</th:block>

	</body>

</html>

# src/main/resources/templates/fragments/navbar.html
<nav th:fragment="navbar" class="navbar navbar-expand-lg navbar fixed-top">
	<!-- Navbar -->
	<nav class="navbar navbar-expand-lg mb-4 fixed-top">
		<div class="container">
			<a class="navbar-brand" href="/">üåø PlantShop</a>
			<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
				<span class="navbar-toggler-icon"></span>
			</button>

			<div class="collapse navbar-collapse" id="navbarNav">
				<ul class="navbar-nav me-auto"></ul>
				<ul class="navbar-nav">
					<li th:if="${loggedUserName}" class="navbar-text me-2"
							th:text="${userRoleString == 'admin' ? loggedUserName + ' (Administrateur)' : loggedUserName}">
					</li>
					<li th:if="${userRoleString == 'visitor' || userRoleString == 'user' || userRoleString == 'admin'}"
						class="nav-item">
						<a class="nav-link" href="/cart">Panier (<span class="cart-count">0</span>)</a>
					</li>
					<li th:if="${userRoleString == 'visitor'}" class="nav-item">
						<a class="nav-link" href="/login">Connexion</a>
					</li>
					<li th:if="${userRoleString == 'visitor'}" class="nav-item">
						<a class="nav-link" href="/register">Inscription</a>
					</li>
					<li th:if="${userRoleString == 'user' || userRoleString == 'admin'}" class="nav-item">
						<a class="nav-link" href="/my_profile">Mon Profil</a>
					</li>
					<li th:if="${userRoleString == 'user' || userRoleString == 'admin'}" class="nav-item">
						<a class="nav-link" href="/orders">Mes Commandes</a>
					</li>

					<li th:if="${userRoleString == 'admin'}" class="nav-item dropdown">
						<a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
							Admin
						</a>
						<ul class="dropdown-menu">
							<li><a class="dropdown-item" href="/admin/plants">Gestion Plantes</a></li>
							<li><a class="dropdown-item" href="/admin/users">Gestion Utilisateurs</a></li>
						</ul>
					</li>

					<li th:if="${userRoleString == 'user' or userRoleString == 'admin'}" class="nav-item">
						<form th:action="@{/logout}" method="post">
							<button type="submit" class="nav-link btn btn-link">D√©connexion</button>
						</form>
					</li>
				</ul>
			</div>
		</div>
	</nav>
</nav>

# src/main/resources/application.yml
# -----------------------------
# CONFIGURATION G√âN√âRALE COMMUNE
# S'applique quel que soit le profil actif (dev, seed, prod)
# -----------------------------
server:
  port: 8080 # Port HTTP utilis√© par le serveur int√©gr√© (Tomcat par d√©faut)

spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/plant_shop
    username: tilnede0x1182
    password: tilnede0x1182
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        format_sql: true
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML
    encoding: UTF-8
    cache: false
  sql:
    init:
      mode: never

logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.security: DEBUG
---

# -----------------------------
# PROFIL DEV : D√©veloppement local
# Activation avec --spring.profiles.active=dev
# -----------------------------

spring:
  config:
    activate:
      on-profile: dev
  thymeleaf:
    cache: false
  jpa:
    hibernate:
      ddl-auto: update
    defer-datasource-initialization: false
  sql:
    init:
      mode: never

---

# -----------------------------
# PROFIL SEED : Pour initialisation de donn√©es (tests, staging)
# Activation avec --spring.profiles.active=seed
# -----------------------------

spring:
  config:
    activate:
      on-profile: seed
  jpa:
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
  sql:
    init:
      mode: always

---

# -----------------------------
# PROFIL PROD : Production
# Activation avec --spring.profiles.active=prod
# -----------------------------

spring:
  config:
    activate:
      on-profile: prod
  devtools:
    enabled: false
    restart:
      enabled: false
  thymeleaf:
    cache: true
  jpa:
    hibernate:
      ddl-auto: validate
  sql:
    init:
      mode: never

# pom.xml
<project>
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.5</version>
    </parent>

    <groupId>com.planteshop</groupId>
    <artifactId>plant-shop-jpa-spring-boot-hibernate-security</artifactId>
    <version>1.0.0</version>

    <dependencies>
        <!-- PostgreSQL -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.7.3</version>
            <!-- <scope>runtime</scope> -->
        </dependency>

        <!-- Faker (pour la seed) -->
        <dependency>
            <groupId>net.datafaker</groupId>
            <artifactId>datafaker</artifactId>
            <version>2.0.2</version>
        </dependency>

        <!-- Web + Thymeleaf -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
            <version>3.0.0</version>
        </dependency>
				<dependency>
    		<groupId>org.thymeleaf.extras</groupId>
						<artifactId>thymeleaf-extras-springsecurity6</artifactId>
				</dependency>

        <!-- JPA + Hibernate -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!-- Security -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>

        <!-- Bootstrap -->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>bootstrap</artifactId>
            <version>5.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator</artifactId>
            <version>0.46</version>
        </dependency>

        <!-- Rechargement automatique -->
        <!-- <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency> -->

        <!-- Bean Validation API -->
        <dependency>
            <groupId>jakarta.validation</groupId>
            <artifactId>jakarta.validation-api</artifactId>
            <version>3.0.2</version>
        </dependency>

        <!-- Hibernate Validator (impl√©mentation) -->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>8.0.1.Final</version>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.30</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>


# Tree du dossier
.
‚îú‚îÄ‚îÄ db
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ plant-shop.db
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ pom.xml
‚îú‚îÄ‚îÄ projet.txt
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ script.sh
‚îú‚îÄ‚îÄ src
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ main
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ com
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ config
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ SecurityConfig.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ AdminPlantController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ AdminUserController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ApiPlantController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ exception
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalControllerAdvice.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalUserTypeAdvice.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ RoleType.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ web
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ CartController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ LoginController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ OrderController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ProfileController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ RegistrationController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ RequiredArgsConstructor.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ WebPlantController.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ model
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ dto
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ request
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ response
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ entity
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CustomerOrder.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderItem.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Plant.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ User.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ enums
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ RoleType.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ PlantShopApplication.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ repository
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderRepository.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ PlantRepository.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserRepository.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ seed
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ DatabaseSeeder.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ service
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ impl
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ UserDetailsServiceImpl.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ util
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ StringUtils.java
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ resources
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ application.yml
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ db
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ V1__init_schema.sql
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ static
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ archives
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ favicon.svg
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ style.css
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon.ico
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ app.js
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ templates
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ plants
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edit.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ form.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ new.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ users
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ edit.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ cart.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ fragments
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ base.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ navbar.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ login.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ orders
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ plants
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ show.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îú‚îÄ‚îÄ profile
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ profile_edit.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ profile.html
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ register.html
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test
‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ java
‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ com
‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬†                 ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬†                 ‚îî‚îÄ‚îÄ service
‚îú‚îÄ‚îÄ target
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ classes
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ application.yml
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ com
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ planteshop
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ config
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ SecurityConfig.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ controller
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ AdminPlantController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ AdminUserController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ api
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ApiPlantController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalControllerAdvice.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ GlobalUserTypeAdvice.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ RoleType.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ web
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ CartController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ LoginController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ OrderController$CartItemDto.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ OrderController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ ProfileController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ RegistrationController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ RequiredArgsConstructor.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ WebPlantController.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ model
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ entity
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CustomerOrder.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderItem.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ Plant.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ User.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ enums
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ RoleType.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ PlantShopApplication.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ repository
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ OrderRepository.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ PlantRepository.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ UserRepository.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ seed
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ DatabaseSeeder$Credential.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ DatabaseSeeder.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ service
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ impl
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ UserDetailsServiceImpl.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ util
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ StringUtils.class
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ db
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ migration
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ V1__init_schema.sql
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ static
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ archives
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ favicon.svg
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ style.css
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ favicon.ico
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ app.js
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ templates
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ admin
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ plants
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ edit.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ form.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ new.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ users
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ edit.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ cart.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ fragments
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ base.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ navbar.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ login.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ orders
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ plants
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ show.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ profile
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ profile_edit.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ profile.html
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ register.html
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ generated-sources
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ annotations
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ generated-test-sources
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test-annotations
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ maven-status
‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ maven-compiler-plugin
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ compile
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ default-compile
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îú‚îÄ‚îÄ createdFiles.lst
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ inputFiles.lst
‚îÇ¬†¬† ‚îÇ¬†¬†     ‚îî‚îÄ‚îÄ testCompile
‚îÇ¬†¬† ‚îÇ¬†¬†         ‚îî‚îÄ‚îÄ default-testCompile
‚îÇ¬†¬† ‚îÇ¬†¬†             ‚îî‚îÄ‚îÄ inputFiles.lst
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ test-classes
‚îú‚îÄ‚îÄ tmp.txt
‚îî‚îÄ‚îÄ users.txt

87 directories, 111 files
